---
title: "Sampling"
format: html
editor: visual
---

# Sampling CE

```{r, message = FALSE, warning = FALSE}
if (!require(tidyverse)) install.packages("tidyverse"); library(tidyverse)
if (!require(rpms)) install.packages("rpms"); library(rpms)
if (!require(sampling)) install.packages("sampling"); library(sampling)
if (!require(survey)) install.packages("survey"); library(survey)
```

## Filtering & EDA

First, we need to get to our population to sample from by filtering and doing a small exploratory data analysis to justify our selection.

```{r}
ce = rpms::CE %>%
  filter(TOTEXPCQ > 0, FINCBTAX > 10, SALARYX > 0, !is.na(REGION), 
         FAM_SIZE %in% factor(1:10), ROOMSQ %in% factor(1:11), NO_EARNR %in% factor(1:4)) %>%
  mutate(TOTEXPCQ = log(TOTEXPCQ), FINCBTAX = log(FINCBTAX)) %>% #,
         #REG_POP = paste0(REGION, "_", POPSIZE)) %>%
  select(-c(QINTRVMO, PSU, INCNONWK, IRAX, LIQUIDX, STOCKX, STUDNTX,
            FOOTWRCQ, TOBACCCQ, TOTXEST, VEHQL, EARNER)) %>%
  group_by(REGION, MARITAL) %>%
  filter(n() >= 70) %>%
  ungroup()
```

```{r}
ggplot(ce, aes(x = TOTEXPCQ, y = FINCBTAX)) + 
  geom_point(alpha = 0.05, aes(size = FINLWT21)) + 
  geom_smooth(method = "lm", color = "blue") + 
  geom_smooth(method = "lm", aes(weight = FINLWT21), color = "green")
```

## Sampling

### Grouping

```{r}
grouping <- function(x, n, strata_prob) {
  N_h = length(strata_prob) # Number of stratum
  quantiles <- quantile(x, probs = seq(0, 1, 1 / N_h), na.rm = TRUE)
  groups <- cut(x, breaks = quantiles, labels = FALSE, include.lowest = TRUE)
  pik = inclusionprobastrata(strata = groups,
                           nh = ceiling(n * strata_prob))
  selected = UPbrewer(pik)
  return(list(pik = pik, sampled = selected))
}

#sample_size = 100
strata_prob = c(0.1, 0.15, 0.25, 0.5)

hi = grouping(x = ce$FINCBTAX, n = sample_size, strata_prob = strata_prob)
```

### Probability Proportional to Size (PPS)

With sampling with the inclusion probabilities proportional to size (PPS), an element of randomness is added to the sampling to account for some variability. Since PPS is positive-definite, it is problematic to suggest an additive random noise process $Z_i = Y_i + \varepsilon_i, \forall i$ where $Z_i$ is the observed response variable, $Y_i$ is the signal derived from the dataset, and $\varepsilon$ is the noise term. Without imposing arbitrary distributional characteristics to $\varepsilon$ to ensure $Z_i > 0$ for all $i$, we should consider a multiplicative regression $$Z_i = Y_i * (1 + \varepsilon_i).$$ Let $\varepsilon \overset{iid}{\sim} \mathcal{N}(0, \sigma^2)$. Then $$E(Z) = E(Y * (1 + \varepsilon)) = E(Y + Y \varepsilon) = E(Y) + E(Y \varepsilon) = E(Y) = Y, \text{ by } Y \perp\!\!\!\!\perp \varepsilon.$$

```{=tex}
\begin{align*}
  \text{Var}(Z) &= \text{Var}(Y * (1 + \varepsilon)) \\ 
  &= \text{Var}(Y) + \text{Var}(Y \varepsilon) + 2 \text{Cov}(Y, Y \varepsilon).
\end{align*}
```
```{=tex}
\begin{equation*}
  \text{Cov}(Y, Y \varepsilon) = E(Y^2 \varepsilon) - E(Y)^2 E(\varepsilon) = E(Y^2) E(\varepsilon) = 0
\end{equation*}
```
```{=tex}
\begin{align*}
  \text{Var}(Y \epsilon) &= \text{Var}(E(Y \varepsilon \mid Y)) + E(\text{Var}(Y \epsilon \mid Y)) \\
  &= \text{Var}(Y E(\varepsilon \mid Y)) + E(Y^2 \text{Var}(\varepsilon \mid Y)) \\
  &= \text{Var}(Y E(\varepsilon)) + E(Y^2 \text{Var}(\varepsilon)) \\
  &= E(\varepsilon)^2 \text{Var}(Y) + E(Y^2) \text{Var}(\varepsilon) \\
  &= E(Y^2) \text{Var}(\varepsilon).
\end{align*}
```
```{=tex}
\begin{align*}
  \text{Var}(Z) &= \text{Var}(Y) + \text{Var}(Y \varepsilon) + 2 \text{Cov}(Y, Y \varepsilon) \\
  &= \text{Var}(Y) + E(Y^2) \text{Var}(\varepsilon).
\end{align*}
```
For some small Var$(\varepsilon)$, we will not have to worry about an extremely low case of $Z = 0$ for some $i$ which ensures variation onto $Y$ and positive $Z$.

```{r}
pps <- function(x, n, noise_sd) {
  noise = rnorm(length(x), 0, noise_sd)
  x_noisy = x * (1 + noise)
  pik = inclusionprobabilities(x_noisy, n)
  selected = UPbrewer(pik)
  return(list(pik = pik, sampled = selected))
}
sampling = pps(x = exp(ce$TOTEXPCQ), n = 50, noise_sd = 0.025)
```

### Two-stage Stratification (STSRS) 

```{r}
stratify <- function(stratum, nh) {
  pik = inclusionprobastrata(as.numeric(stratum), nh)
  sampled <- rep(0, length(stratum))
  sampled[unlist(sapply(levels(as.factor(stratum)), function(s) {
    indices <- which(stratum == s)
    selected <- sample(indices, size = nh[as.numeric(s)], replace = FALSE)
    return(selected)
  }))] <- 1
  return(list(pik = pik, sampled = sampled))
}

welp = stratify(stratum = ce$REGION, nh = c(150, 150, 500, 200))
```

### Two-stage Clustering (CL-SRS)

```{r}
clustering <- function(clusters, n, m) {
  selected_clusters <- sample(x = unique(clusters), size = n, replace = FALSE)
  
  sampled <- rep(0, length(clusters))
  for (c in selected_clusters) {
    indices <- which(clusters == c)
    selected <- sample(indices, size = m, replace = FALSE)
    sampled[selected] <- 1
  }
  
  clust_pik = data.frame(clust = clusters) %>% # Returns vector of the pik for a jth element
    group_by(clust) %>%
    summarize(pik = n / length(unique(clusters)) * m / n())
  
  pik_list = left_join(data.frame(clusters = clusters),
                       mutate(clust_pik, clusters = clust),
                       by = "clusters")
  
  return(list(pik = pik_list$pik, sampled = sampled))
}

hi = clustering(clusters = ce$INCOMEY, n = 2, m = 500 / 2)
```

### Three-stage Clustering - Stratified (CL-ST-SRS)

```{r, message = FALSE}
three_stage_clust_strat <- function(clusters, stratum, n, sample_size) {
  selected_clusters = sample(x = unique(clusters), size = n, replace = FALSE)
  clust_indices = which(clusters %in% selected_clusters)
  stratum_in_clust = paste0(clusters[clust_indices], "_", stratum[clust_indices])
  threestage = data.frame(clusters = clusters, stratum = stratum,
                          index = 1:length(clusters))
  
  m = round(sample_size / length(unique(stratum_in_clust)), 0)
  sampled = threestage %>%
    filter(clusters %in% selected_clusters) %>%
    group_by(clusters, stratum) %>%
    sample_n(size = m, replace = FALSE) %>%
    ungroup()
  
  selected = rep(0, length(clusters))
  selected[sampled$index] <- 1
  
  stratum_pik = data.frame(clust = clusters, strat = stratum) %>%
    group_by(clust, strat) %>%
    summarize(pik = (n / length(unique(clusters))) * (m / n()))
  
  pik_list = left_join(threestage, stratum_pik,
                       by = c("clusters" = "clust", "stratum" = "strat")) %>%
    mutate(pik = pik * sum(selected) / sum(pik)) # pik does not always equal n, so scale
  
  return(list(pik = pik_list$pik, sampled = selected))
}

hi = three_stage_clust_strat(clusters = ce$REGION, stratum = ce$MARITAL,
                             n = 3, sample_size = 1000)
```



## CE Simulation

```{r, message = FALSE, warning = FALSE}
set.seed(51483464)
B = 5000

n <- c(50, 100, 250, 500, 1000)
methods <- c("grouping", "pps", "stratify", "cluster", "twostage")
cases <- expand_grid(methods, n)

columns = c("case", "iteration", "DD", "PN", "HP", "PS1", "PS1q", "PS2", "PS2q", 
            "PS3", "WF", "LR")
storage = data.frame(matrix(nrow = 0, ncol = length(columns)))
colnames(storage) = columns

for (case in 1:nrow(cases)) {
  DD = PN = HP = PS1 = PS1q = PS2 = PS2q = PS3 = WF = LR = rep(NA, B)
  case_storage = data.frame(iteration = seq_len(B), DD, PN, HP, PS1, PS1q,
                            PS2, PS2q, PS3, WF, LR)
  
  for (b in 1:B) {

    sampling = NULL
    if (cases$methods[case] == "grouping") { # Bad
      sampling = grouping(x = ce$TOTEXPCQ, n = cases$n[case], strata_prob = c(0.15, 0.2, 0.25, 0.4))
    } 
    if (cases$methods[case] == "pps") { # Decent - converges only with some tests
      sampling = pps(x = ce$TOTEXPCQ, n = cases$n[case], noise_sd = 0.025)
    } 
    if (cases$methods[case] == "stratify") { # Good
      sampling = stratify(stratum = ce$NO_EARNR, nh = round(cases$n[case] * c(0.4, 0.35, 0.15, 0.10)))
    }
    if (cases$methods[case] == "cluster") { # Good
      #n = ifelse(cases$n[case] %in% c(50, 100), 2, 3) # Increase m per n
      sampling = clustering(clusters = ce$INCOMEY, n = 3, m = cases$n[case] / 3)
    }
    if (cases$methods[case] == "twostage") { # Very good!
      n = ifelse(cases$n[case] %in% c(50, 100), 2, 3) # Increase n_I per M
      sampling = three_stage_clust_strat(clusters = ce$REGION, stratum = ce$MARITAL,
                                         n = n, sample_size = cases$n[case])
    }
    samp = ce[1:nrow(ce) * sampling$sample,] %>%
      mutate(wts = 1 / sampling$pik[1:nrow(ce) * sampling$sample])
    
    case_storage$HP[b] = HP_DC_test(data = samp, y = samp$FINCBTAX, x = samp$TOTEXPCQ, wts = samp$wts)
    case_storage$DD[b] = DD_WA_test(data = samp, y = samp$FINCBTAX, x = samp$TOTEXPCQ, wts = samp$wts)
    case_storage$PS1[b] = PS1_WA_test(data = samp, y = samp$FINCBTAX, x = samp$TOTEXPCQ, wts = samp$wts)
    case_storage$PS2[b] = PS2_WA_test(data = samp, y = samp$FINCBTAX, x = samp$TOTEXPCQ, wts = samp$wts)
    case_storage$PS3[b] = PS3_test(data = samp, y = samp$FINCBTAX, x = samp$TOTEXPCQ, wts = samp$wts)
    case_storage$WF[b] = WF_WA_test(data = samp, y = samp$FINCBTAX, x = samp$TOTEXPCQ, wts = samp$wts)
    case_storage$PN[b] = PN_test(data = samp, y = samp$FINCBTAX, x = samp$TOTEXPCQ, wts = samp$wts)
    case_storage$PS1q[b] = PS1q_WA_test(data = samp, y = samp$FINCBTAX, x = samp$TOTEXPCQ, wts = samp$wts)
    case_storage$PS2q[b] = PS2q_WA_test(data = samp, y = samp$FINCBTAX, x = samp$TOTEXPCQ, wts = samp$wts)
    case_storage$LR[b] = LR_test(data = samp, y = samp$FINCBTAX, x = samp$TOTEXPCQ, wts = samp$wts)
    
  }
  storage = rbind(storage, cbind(case, case_storage))
  print(case)
}
write.csv(storage, "ce_results.csv")
```

```{r}
test_results = read.csv("ce_results.csv")

test_reject = test_results %>%
  mutate(HP = case_when(HP <= 0.05 ~ 1, TRUE ~ 0),
         DD = case_when(DD <= 0.05 ~ 1, TRUE ~ 0),
         PS1 = case_when(PS1 <= 0.05 ~ 1, TRUE ~ 0),
         PS1q = case_when(PS1q <= 0.05 ~ 1, TRUE ~ 0),
         PS2 = case_when(PS2 <= 0.05 ~ 1, TRUE ~ 0),
         PS2q = case_when(PS2q <= 0.05 ~ 1, TRUE ~ 0),
         PS3 = case_when(PS3 <= 0.05 ~ 1, TRUE ~ 0),
         WF = case_when(WF <= 0.05 ~ 1, TRUE ~ 0),
         LR = case_when(LR <= 0.05 ~ 1, TRUE ~ 0),
         PN = case_when(PN <= 0.05 ~ 1, TRUE ~ 0)) %>%
  select(-iteration) %>%
  group_by(case) %>%
  summarize(across(everything(), mean)) %>%
  mutate(HP = format(round(HP * 100, 1), nsmall = 1),
         DD = format(round(DD * 100, 1), nsmall = 1),
         PS1 = format(round(PS1 * 100, 1), nsmall = 1),
         PS1q = format(round(PS1q * 100, 1), nsmall = 1),
         PS2 = format(round(PS2 * 100, 1), nsmall = 1),
         PS2q = format(round(PS2q * 100, 1), nsmall = 1),
         PS3 = format(round(PS3 * 100, 1), nsmall = 1),
         WF = format(round(WF * 100, 1), nsmall = 1),
         LR = format(round(LR * 100, 1), nsmall = 1),
         PN = format(round(PN * 100, 1), nsmall = 1))

test_reject_table = cbind(cases, test_reject) %>% select(-c(X, case, PN, LR))
test_reject_table

#write.csv(test_reject_table, "ce_reject_table.csv")
write.csv(test_reject_table, "ce_reject_table_large.csv")
```

### Miscellanous Computations

```{r}
HP_DC_test(data = ce, y = ce$FINCBTAX, x = ce$TOTEXPCQ, wts = ce$FINLWT21)
DD_WA_test(data = ce, y = ce$FINCBTAX, x = ce$TOTEXPCQ, wts = ce$FINLWT21)
PS1_WA_test(data = ce, y = ce$FINCBTAX, x = ce$TOTEXPCQ, wts = ce$FINLWT21)
PS2_WA_test(data = ce, y = ce$FINCBTAX, x = ce$TOTEXPCQ, wts = ce$FINLWT21)
PS3_test(data = ce, y = ce$FINCBTAX, x = ce$TOTEXPCQ, wts = ce$FINLWT21)
WF_WA_test(data = ce, y = ce$FINCBTAX, x = ce$TOTEXPCQ, wts = ce$FINLWT21)
#PN_test(data = ce, y = ce$FINCBTAX, x = ce$TOTEXPCQ, wts = ce$FINLWT21)
PS1q_WA_test(data = ce, y = ce$FINCBTAX, x = ce$TOTEXPCQ, wts = ce$FINLWT21)
PS2q_WA_test(data = ce, y = ce$FINCBTAX, x = ce$TOTEXPCQ, wts = ce$FINLWT21)
#LR_test(data = ce, y = ce$FINCBTAX, x = ce$TOTEXPCQ, wts = ce$FINLWT21)
```

```{r}
ce %>%
  mutate(quantiles = ntile(TOTEXPCQ, 10), TOTEXPCQ = exp(TOTEXPCQ), FINCBTAX = exp(FINCBTAX)) %>%
  group_by(quantiles) %>%
  summarize(est = mean(FINCBTAX), sd = sd(FINCBTAX), count = n())
```

```{r, fig.width = 10, fig.height = 10}
library(reshape2)
library(bbplot)
library(scales)
library(ggthemes)

ce_melted_strat = ce %>%
  select(FINCBTAX, #POPSIZE, BLS_URBN,
         NO_EARNR, MARITAL, FAM_SIZE, ROOMSQ) %>%
  mutate(FINCBTAX = exp(FINCBTAX)) %>%
  melt(., id.vars = "FINCBTAX")

label_names = c("NO_EARNR" = "Number of Earners", "MARITAL" = "Martial Status",
                "FAM_SIZE" = "Family Size", "ROOMSQ" = "Number of Rooms")

ggplot(ce_melted_strat, aes(y = FINCBTAX, x = factor(value, levels = as.character(1:11)), fill = factor(variable))) + 
  geom_boxplot() + 
  facet_wrap(~variable, ncol = 2, nrow = 2, scales = "free_x", strip.position = "top",
             labeller = as_labeller(label_names)) + 
  theme_hc() +
  scale_y_continuous(labels = unit_format(unit = "k", scale = 1e-3)) + 
  labs(y = "Total CU Income") + #, title = "Spread of CU Total Income by Earner Characteristics") + 
  theme(text = element_text(size = 20, family = "Palatino"),
        legend.position = "none", 
        axis.title.x = element_blank(),
        strip.background.x = element_blank(),
        axis.text.x = element_text(vjust = 6, size = 15),
        axis.ticks = element_blank(),
        axis.title.y = element_blank())
ggsave("ce_strat.png")
```

```{r, fig.height= 10, fig.width= 10}
ce_melted_clust = ce %>%
  select(FINCBTAX, MEMBRACE, INCOMEY, REGION, POPSIZE) %>%
  mutate(FINCBTAX = exp(FINCBTAX)) %>%
  melt(., id.vars = "FINCBTAX")

label_names = c("MEMBRACE" = "Race of Earner", "INCOMEY" = "Type of Earner's Employment",
                "REGION" = "U.S. Region Code", "POPSIZE" = "Population Size Class")

ggplot(ce_melted_clust, aes(y = FINCBTAX, x = factor(value, levels = as.character(1:6)), fill = factor(variable))) + 
  geom_boxplot() + 
  facet_wrap(~variable, ncol = 2, nrow = 2, scales = "free_x", strip.position = "top",
             labeller = as_labeller(label_names)) + 
  theme_hc() +
  scale_y_continuous(labels = unit_format(unit = "k", scale = 1e-3)) + 
  labs(y = "Total CU Income") + #, title = "Spread of CU Total Income by Earner Characteristics") + 
  theme(text = element_text(size = 20, family = "Palatino"),
        legend.position = "none", 
        axis.title.x = element_blank(),
        strip.background.x = element_blank(),
        axis.text.x = element_text(vjust = 6, size = 14),
        axis.ticks = element_blank(),
        axis.title.y = element_blank())
ggsave("ce_clust.png")
```

```{r}
ggplot(mutate(ce, REG_POP = paste0(REGION, "_", POPSIZE)), aes(x = factor(REG_POP), y = exp(FINCBTAX))) + 
  geom_boxplot()

ce %>% group_by(REGION, MARITAL) %>% summarise(count = n())

ggplot(ce, aes(x = factor(OCCUCODE), y = exp(FINCBTAX))) + 
  geom_boxplot()
```

```{r}
ce %>%
  mutate(quantiles = ntile(FINCBTAX, 10), TOTEXPCQ = exp(TOTEXPCQ), FINCBTAX = exp(FINCBTAX)) %>%
  group_by(quantiles) %>%
  summarize()
```

```{r,fig.height= 10, fig.width= 10}
group50 = grouping(x = ce$TOTEXPCQ, n = 50, strata_prob = c(0.05, 0.15, 0.20, 0.6))
pps50 = pps(x = ce$TOTEXPCQ, n = 50, noise_sd = 0.025)
strat50 = stratify(stratum = ce$NO_EARNR, nh = round(50 * c(0.4, 0.35, 0.15, 0.10)))
clust50 = clustering(clusters = ce$INCOMEY, n = 3, m = 50 / 3)
twostage50 = three_stage_clust_strat(clusters = ce$REGION, stratum = ce$MARITAL,
                                         n = 2, sample_size = 50)

group100 = grouping(x = ce$TOTEXPCQ, n = 100, strata_prob = c(0.05, 0.15, 0.20, 0.6))
pps100 = pps(x = ce$TOTEXPCQ, n = 100, noise_sd = 0.025)
strat100 = stratify(stratum = ce$NO_EARNR, nh = round(100 * c(0.4, 0.35, 0.15, 0.10)))
clust100 = clustering(clusters = ce$INCOMEY, n = 3, m = 100 / 3)
twostage100 = three_stage_clust_strat(clusters = ce$REGION, stratum = ce$MARITAL,
                                         n = 2, sample_size = 100)

group1000 = grouping(x = ce$TOTEXPCQ, n = 1000, strata_prob = c(0.05, 0.15, 0.20, 0.6))
pps1000 = pps(x = ce$TOTEXPCQ, n = 1000, noise_sd = 0.025)
strat1000 = stratify(stratum = ce$NO_EARNR, nh = round(1000 * c(0.4, 0.35, 0.15, 0.10)))
clust1000 = clustering(clusters = ce$INCOMEY, n = 3, m = 1000 / 3)
twostage1000 = three_stage_clust_strat(clusters = ce$REGION, stratum = ce$MARITAL,
                                         n = 3, sample_size = 1000)

columns = c("wt", "method", "size")
weidist = data.frame(matrix(nrow = 0, ncol = length(columns)))
colnames(weidist) = columns

g50 = cbind(1 / group50$pik[1:length(group50$pik) * group50$sampled], "Grouping", "fifty")
p50 = cbind(1 / pps50$pik[1:length(pps50$pik) * pps50$sampled], "PPS", "fifty")
s50 = cbind(1 / strat50$pik[1:length(strat50$pik) * strat50$sampled], "Stratifying", "fifty")
c50 = cbind(1 / clust50$pik[1:length(clust50$pik) * clust50$sampled], "Clustering", "fifty")
t50 = cbind(1 / twostage50$pik[1:length(twostage50$pik) * twostage50$sampled], "Two Stage", "fifty")

# g50 = cbind(1 / group100$pik[1:length(group100$pik) * group100$sampled], "Grouping", "50")
# p50 = cbind(1 / pps100$pik[1:length(pps100$pik) * pps100$sampled], "PPS", "50")
# s50 = cbind(1 / strat100$pik[1:length(strat100$pik) * strat100$sampled], "Stratifying", "50")
# c50 = cbind(1 / clust100$pik[1:length(clust100$pik) * clust100$sampled], "Clustering", "50")
# t50 = cbind(1 / twostage100$pik[1:length(twostage100$pik) * twostage100$sampled], "Two Stage", "50")

g1000 = cbind(1 / group1000$pik[1:length(group1000$pik) * group1000$sampled], "Grouping", "thousand")
p1000 = cbind(1 / pps1000$pik[1:length(pps1000$pik) * pps1000$sampled], "PPS", "thousand")
s1000 = cbind(1 / strat1000$pik[1:length(strat1000$pik) * strat1000$sampled], "Stratifying", "thousand")
c1000 = cbind(1 / clust1000$pik[1:length(clust1000$pik) * clust1000$sampled], "Clustering", "thousand")
t1000 = cbind(1 / twostage1000$pik[1:length(twostage1000$pik) * twostage1000$sampled], "Two Stage", "thousand")


# g50 = cbind(group50$pik, "Grouping", "50")
# p50 = cbind(pps50$pik, "PPS", "50")
# s50 = cbind(strat50$pik, "Stratifying", "50")
# c50 = cbind(clust50$pik, "Clustering", "50")
# t50 = cbind(twostage50$pik, "Two Stage", "50")
# 
# g1000 = cbind(group1000$pik, "Grouping", "1000")
# p1000 = cbind(pps1000$pik, "PPS", "1000")
# s1000 = cbind(strat1000$pik, "Stratifying", "1000")
# c1000 = cbind(clust1000$pik, "Clustering", "1000")
# t1000 = cbind(twostage1000$pik, "Two Stage", "1000")



weidist = rbind(weidist, #g50, p50, s50, c50, t50,
                g1000, p1000, s1000, c1000, t1000) #, cbind(nrow(ce) / 1000, "SRS", "thousand"))
colnames(weidist) = columns

# ggplot(weidist, aes(x = as.numeric(wt))) + 
#   geom_histogram() + 
#   facet_grid(rows = vars(method), cols = vars(size), scales = "free")


label_names = c("Clustering_fifty" = "Clustering, 50",
                "Grouping_fifty" = "Grouping, 50",
                "PPS_fifty" = "PPS, 50",
                "Stratifying_fifty" = "Stratifying, 50",
                "Two Stage_fifty" = "Two Stage, 50",
                "Clustering_thousand" = "Clustering, 1000",
                "Grouping_thousand" = "Grouping, 1000",
                "PPS_thousand" = "PPS, 1000",
                "Stratifying_thousand" = "Stratifying, 1000",
                "Two Stage_thousand" = "Two Stage, 1000")

weidist1 = weidist %>%
  mutate(agg = paste0(method, "_", size))

ggplot(weidist1, aes(x = as.numeric(wt), fill = agg)) + 
  geom_histogram(aes(y = after_stat(count / sum(count)), binwidth = after_stat(2 * IQR(as.numeric(x)) / (count^(1/3))))) + 
  facet_wrap(~agg, ncol = 2,scales = "free", strip.position = "top", 
             labeller = as_labeller(label_names)) + 
  theme_hc() + 
  scale_fill_manual(values = c("#E69F00", "#56B4E9", "#009E73", "#0072B2", "#D55E00", "#CC79A7")) + 
  #labs(x = "Weights") + 
  theme(text = element_text(size = 17, family = "Palatino"),
        legend.position = "none", 
        axis.title.x = element_blank(),
        strip.background.x = element_blank(),
        #axis.text.x = element_text(vjust = 6, size = 14),
        #axis.ticks = element_blank(),
        axis.title.y = element_blank())
ggsave("ce_weit.png")

```

```{r}
ggplot(samp, aes(x = TOTEXPCQ, y = FINCBTAX)) + 
  geom_point(alpha = 0.15, aes(size = wts)) + 
  geom_smooth(method = "lm", color = "darkblue") + 
  geom_smooth(method = "lm", aes(weight = FINLWT21), color = "firebrick3") + 
  theme_hc() +
  labs(y = "Log of Total Consumer Income", x = "Log of Total Consumer Expenditure") + 
  theme(legend.position = "none")
ggsave("ce_visual.png")

# Stratifying, n = 500, 
HP_DC_test(data = samp, y = samp$FINCBTAX, x = samp$TOTEXPCQ, wts = samp$wts)
DD_WA_test(data = samp, y = samp$FINCBTAX, x = samp$TOTEXPCQ, wts = samp$wts)
PS1_WA_test(data = samp, y = samp$FINCBTAX, x = samp$TOTEXPCQ, wts = samp$wts)
PS2_WA_test(data = samp, y = samp$FINCBTAX, x = samp$TOTEXPCQ, wts = samp$wts)
PS3_test(data = samp, y = samp$FINCBTAX, x = samp$TOTEXPCQ, wts = samp$wts)
WF_WA_test(data = samp, y = samp$FINCBTAX, x = samp$TOTEXPCQ, wts = samp$wts)
PS1q_WA_test(data = samp, y = samp$FINCBTAX, x = samp$TOTEXPCQ, wts = samp$wts)
PS2q_WA_test(data = samp, y = samp$FINCBTAX, x = samp$TOTEXPCQ, wts = samp$wts)

mod1 = lm(FINCBTAX ~ TOTEXPCQ, samp)
summary(mod1)

design = svydesign(ids = ~1, weights = ~wts, data = samp)
mod2 = svyglm(FINCBTAX ~ TOTEXPCQ, design = design)
summary(mod2)

confint(mod1)
confint(mod2)
```

